// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: inscription_contract.proto
// </auto-generated>
// Original file comments:
// *
// Forest Contract.
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace Forest.Inscription {

  #region Events
  public partial class InscriptionCreated : aelf::IEvent<InscriptionCreated>
  {
    public global::System.Collections.Generic.IEnumerable<InscriptionCreated> GetIndexed()
    {
      return new List<InscriptionCreated>
      {
      };
    }

    public InscriptionCreated GetNonIndexed()
    {
      return new InscriptionCreated
      {
        CollectionSymbol = CollectionSymbol,
        ItemSymbol = ItemSymbol,
        Tick = Tick,
        TotalSupply = TotalSupply,
        Decimals = Decimals,
        Issuer = Issuer,
        IsBurnable = IsBurnable,
        IssueChainId = IssueChainId,
        CollectionExternalInfo = CollectionExternalInfo,
        ItemExternalInfo = ItemExternalInfo,
        Owner = Owner,
        Limit = Limit,
        Deployer = Deployer,
      };
    }
  }

  public partial class InscriptionIssued : aelf::IEvent<InscriptionIssued>
  {
    public global::System.Collections.Generic.IEnumerable<InscriptionIssued> GetIndexed()
    {
      return new List<InscriptionIssued>
      {
      };
    }

    public InscriptionIssued GetNonIndexed()
    {
      return new InscriptionIssued
      {
        Symbol = Symbol,
        Tick = Tick,
        Amt = Amt,
        To = To,
        InscriptionInfo = InscriptionInfo,
      };
    }
  }

  public partial class InscriptionTransferred : aelf::IEvent<InscriptionTransferred>
  {
    public global::System.Collections.Generic.IEnumerable<InscriptionTransferred> GetIndexed()
    {
      return new List<InscriptionTransferred>
      {
      new InscriptionTransferred
      {
        From = From
      },
      new InscriptionTransferred
      {
        To = To
      },
      new InscriptionTransferred
      {
        Symbol = Symbol
      },
      new InscriptionTransferred
      {
        Tick = Tick
      },
      };
    }

    public InscriptionTransferred GetNonIndexed()
    {
      return new InscriptionTransferred
      {
        Amt = Amt,
        InscriptionInfo = InscriptionInfo,
      };
    }
  }

  #endregion
}
#endregion

